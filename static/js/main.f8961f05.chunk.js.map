{"version":3,"sources":["stepper/StepperButtons.js","form/style.js","form/MealSelection.js","services/restaurantService.js","form/RestaurantSelection.js","form/DishSelector.js","form/DishesList.js","form/DishesSelection.js","form/Review.js","stepper/Stepper.js","App.js","serviceWorker.js","index.js"],"names":["ButtonStyle","width","height","borderRadius","backgroundColor","fontSize","border","cursor","outline","ButtonStyleDisabled","Object","objectSpread","MainContainerStyle","margin","display","justifyContent","minWidth","StepperButtons","props","prevStep","nextStep","submit","isValid","react_default","a","createElement","style","title","onClick","disabled","undefined","FieldContainerStyle","flexDirection","alignItems","marginRight","InputContainerStyle","marginBottom","LabelStyle","textAlign","InputStyle","padding","PlusStyle","_PlusStyle","defineProperty","ErrorStyle","color","TableKeyStyle","verticalAlign","MealSelection","handleMealChange","e","_this","updateState","selectedMeal","currentTarget","value","selectedRestaurant","selectedDishes","handlePeopleCountChange","peopleCount","parseInt","isNaN","Math","max","min","this","_this$props","htmlFor","id","onChange","type","stepper_StepperButtons","areFieldsValid","Component","restaurantsMemoizer","Map","dishesAsMap","json","dishes","reduce","result","next","set","RestaurantSelection","handleRestaurantChange","isFieldValid","meal","restaurants","get","restaurantSets","Set","filter","dish","availableMeals","includes","forEach","add","restaurant","Array","from","sort","getRestaurants","map","key","DishSelector","state","dishId","count","handleDishChange","setState","addDish","_this$state","validateFields","uuid","v4","setError","_this$state2","filteredDishes","_this$state3","selectedDishesId","has","name","DishesList","removeDish","removeDishWrapper","bind","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","updateDishes","concat","toConsumableArray","error","nextStepWrapper","buildFilteredDishesState","nextProps","arguments","length","sumOfDishes","form_DishesList","form_DishSelector","Review","overflow","StepStyle","PreviousStepStyle","CurrentStepStyle","borderBottom","Steps","Stepper","currentStep","idx","App","step","partialState","updateStep","console","log","form_Review","DishesSelection","form_RestaurantSelection","form_MealSelection","stepper_Stepper","getView","Boolean","window","location","hostname","match","container","document","getElementById","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f8961f05.chunk.js","sourcesContent":["// @flow\nimport React, { Component } from 'react';\n\nconst ButtonStyle = {\n    width: 100,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: '#f9f9f9',\n    fontSize: 16,\n    border: '1px solid #e0e0e0',\n    cursor: 'pointer',\n    outline: 'none', // TODO manual outline require when button is active, hover or focus + aria\n};\n\nconst ButtonStyleDisabled = {\n    ...ButtonStyle,\n    backgroundColor: '#d6d6d6',\n    cursor: 'not-allowed',\n}\n\nconst MainContainerStyle = {\n    margin: 20,\n    display: 'flex',\n    justifyContent: 'space-between',\n    minWidth: 400,\n}\n\ntype Props = {\n    prevStep?: () => void,\n    nextStep: () => void,\n    submit?: boolean,\n    isValid: boolean,\n};\n\n/**\n * Footer of the form to step forward or backward\n * \"previous button\" is replaced by a div to keep the same flex disposition in the window\n */\nfunction StepperButtons(props:Props) {\n    const {prevStep, nextStep, submit, isValid} = props;\n    return (\n        <div style={MainContainerStyle}>\n            { prevStep ? <button title=\"previous step\" style={ButtonStyle} onClick={prevStep}>back</button> : <div/>}\n            <button \n                title=\"next step\" \n                style={isValid ? ButtonStyle : ButtonStyleDisabled} \n                disabled={!isValid} \n                onClick={isValid ? nextStep : undefined}>\n                {submit ? \"submit\" : \"next\"}\n            </button>\n        </div>\n    );\n  }\n  \n  export default StepperButtons;","export const FieldContainerStyle = {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    marginRight: 10,\n};\n\nexport const InputContainerStyle = {\n    marginBottom: 20,\n};\n\nexport const LabelStyle = {\n    textAlign: 'center',\n};\n\nexport const InputStyle = {\n    minWidth: 200,\n    height: 40,\n    borderRadius: 10,\n    backgroundColor: '#f9f9f9',\n    fontSize: 16,\n    border: '1px solid #e0e0e0',\n    padding: '0 5px',\n    outline: 'none', // TODO manual outline require when button is active, hover or focus + aria\n};\n\nexport const PlusStyle = {\n    width: 100,\n    height: 40,\n    width: 40,\n    fontSize: 25,\n    borderRadius: '50%',\n    backgroundColor: '#f9f9f9',\n    border: '1px solid #e0e0e0',\n    cursor: 'pointer',\n    outline: 'none', // TODO manual outline require when button is active, hover or focus + aria\n};\n\nexport const ErrorStyle = {\n    color: \"red\", \n    fontSize: 12,\n};\n\nexport const TableKeyStyle = {\n    textAlign: 'right',\n    verticalAlign: 'top',\n};","// @flow\nimport React, { Component } from 'react';\nimport StepperButtons from '../stepper/StepperButtons';\nimport { FieldContainerStyle, InputContainerStyle, LabelStyle, InputStyle } from './style';\n\nimport type { FormState, MealType } from '../types';\n\ntype Props = {\n    updateState: (partialState: $Shape<FormState>) => void,\n    nextStep: () => void,\n    selectedMeal: MealType,\n    peopleCount: number,\n};\n\n/**\n * Component to select a meal\n * default at \"lunch\"\n * options breakfast, lunch & dinner are hard coded\n */\nclass MealSelection extends Component<Props> {\n    handleMealChange = (e: SyntheticEvent<HTMLSelectElement>) => {\n        this.props.updateState({\n            selectedMeal: e.currentTarget.value,\n            selectedRestaurant: \"\",\n            selectedDishes:[],\n        });\n    }\n\n    handlePeopleCountChange = (e: SyntheticEvent<HTMLInputElement>) => {\n        let peopleCount = parseInt(e.currentTarget.value);\n        peopleCount = isNaN(peopleCount) ? '' : Math.max(1, Math.min(10, peopleCount));\n        this.props.updateState({peopleCount});\n    }\n\n    // just in case, but handlePeopleCountChange should ensure the validity (we force a number between 1 and 10)\n    areFieldsValid() {\n        const { peopleCount } = this.props;\n        return peopleCount >= 1 && peopleCount <= 10;\n    }\n    \n    render() {\n        const { selectedMeal, peopleCount, nextStep } = this.props;\n        return (\n            <div>\n                <div style={FieldContainerStyle}>\n                    <div style={InputContainerStyle}>\n                        <div style={LabelStyle}>\n                            <label htmlFor=\"meal-select\">Please select a meal</label>\n                        </div>\n                        <select \n                            id=\"meal-select\" \n                            style={InputStyle} \n                            value={selectedMeal} \n                            onChange={this.handleMealChange}>\n                            <option value=\"breakfast\">breakfast</option>\n                            <option value=\"lunch\">lunch</option>\n                            <option value=\"dinner\">dinner</option>\n                        </select>\n                    </div>\n                    <div>\n                        <div style={LabelStyle}>\n                            <label htmlFor=\"people-count\">Please enter the number of people</label>\n                        </div>\n                        <input \n                            id=\"people-count\" \n                            type=\"number\" \n                            min=\"1\" \n                            max=\"10\"\n                            style={InputStyle} \n                            value={peopleCount} \n                            onChange={this.handlePeopleCountChange} />\n                    </div>\n                </div>\n                <StepperButtons isValid={this.areFieldsValid()} nextStep={nextStep} />\n            </div>\n        );\n    }\n  }\n  \n  export default MealSelection;","import json from '../data/dishes.json';\n\nimport type { MealType } from '../types';\n\nconst restaurantsMemoizer = new Map();\nexport function getRestaurants(meal: MealType) {\n    let restaurants = restaurantsMemoizer.get(meal);\n    if (!restaurants) {\n        const restaurantSets = new Set();\n        json.dishes.filter(dish => dish.availableMeals.includes(meal)).forEach(dish => {\n            restaurantSets.add(dish.restaurant);\n        });\n        restaurants = Array.from(restaurantSets).sort();\n        restaurantsMemoizer.set(meal, restaurants);\n    }\n    return restaurants;\n}\n\nexport function getDishesByRestaurant(selectedMeal: MealType, selectedRestaurant: string) {\n    return json.dishes.filter(dish => dish.restaurant === selectedRestaurant && dish.availableMeals.includes(selectedMeal));\n}\n\n// create a map between id -> dish in case the json contains more information than the name in the future\nexport const dishesAsMap = json.dishes.reduce((result, next) => {\n    result.set(next.id, next);\n    return result;\n}, new Map())\n\nexport default json;\n","// @flow\nimport React, { Component } from 'react';\nimport { getRestaurants } from '../services/restaurantService';\nimport StepperButtons from '../stepper/StepperButtons';\nimport { FieldContainerStyle, LabelStyle, InputStyle } from './style';\n\nimport type { FormState, MealType } from '../types';\n\ntype Props = {\n    updateState: (partialState: $Shape<FormState>) => void,\n    prevStep: () => void,\n    nextStep: () => void,\n    selectedMeal: MealType,\n    selectedRestaurant: string,\n};\n\n/**\n * Step 2: Select a restaurant depending of the meal you want\n */\nclass RestaurantSelection extends Component<Props> {\n    handleRestaurantChange = (e: SyntheticEvent<HTMLSelectElement>) => {\n        this.props.updateState({\n            selectedRestaurant: e.currentTarget.value,\n            selectedDishes:[],\n        });\n    }\n\n    isFieldValid = () => {\n        const { selectedRestaurant } = this.props;\n        return selectedRestaurant !== \"\";\n    }\n    \n    render() {\n        const { selectedMeal, selectedRestaurant, prevStep, nextStep } = this.props;\n        return (\n            <div>\n                <div style={FieldContainerStyle}>\n                    <div style={LabelStyle}>\n                        <label htmlFor=\"restaurant-select\">please select a restaurant</label>\n                    </div>\n                    <select \n                        id=\"restaurant-select\" \n                        style={InputStyle}\n                        value={selectedRestaurant} \n                        onChange={this.handleRestaurantChange}>\n                        <option disabled value=\"\">---</option>\n                        {\n                            getRestaurants(selectedMeal).map(restaurant => (\n                            <option key={restaurant} value={restaurant} >{restaurant}</option>  \n                            ))\n                        }\n                    </select>\n                </div>\n                <StepperButtons isValid={this.isFieldValid()} prevStep={prevStep} nextStep={nextStep} />\n            </div>\n        );\n    }\n  }\n  \n  export default RestaurantSelection;","// @flow\nimport React, { Component } from 'react';\nimport uuid from 'uuid'; // use short uuid to avoid rendering problem (especially in a case of empty dishId)\nimport { FieldContainerStyle, InputStyle, PlusStyle } from './style';\n\nimport type { SelectedDishType } from '../types';\n\ntype Props = {\n    addDish: ({dishId: number, count: number, id: string}) => void,\n    filteredDishes: Array<any>,\n    setError: (error: string) => void,\n    selectedDishes: Array<SelectedDishType>,\n};\n\ntype State = {\n    dishId: \"\" | number,\n    count: \"\" | number,\n}\n\n/**\n * simple component to select a dish and the number of serving\n */\nclass DishSelector extends Component<Props, State> {\n    state = {\n        dishId: '',\n        count: 1,\n    }\n\n    handleDishChange = (e: SyntheticEvent<HTMLSelectElement>) => {\n        this.setState({dishId: parseInt(e.currentTarget.value)});\n    }\n\n\n    handlePeopleCountChange = (e: SyntheticEvent<HTMLInputElement>) => {\n        const value = parseInt(e.currentTarget.value);\n        const count = isNaN(value) ? '' : Math.max(1, value);\n        this.setState({count});\n    }\n\n    validateFields() {\n        const { setError } = this.props;\n        const { dishId, count } = this.state;\n        if (dishId === '') {\n            setError('You must choose a dish first');\n            return false;\n        }   \n        if (count === \"\" || !(count>=1)) {\n            setError('You must set a valid number');\n            return false;\n        }\n        return true;\n    }\n\n    addDish = () => {\n        const { addDish } = this.props;\n        const { dishId, count } = this.state;\n        \n        if (this.validateFields()) {\n            addDish({\n                dishId: ((dishId: any): number), // type is checked during validation\n                count: ((count: any): number),\n                id: uuid.v4(),\n            });\n            this.setState({\n                dishId: \"\",\n                count: 1,\n            })\n        }\n    }\n\n    render() {\n        const { filteredDishes, selectedDishes } = this.props;\n        const { dishId, count } = this.state;\n\n        const selectedDishesId = selectedDishes.filter(next => next.dishId).reduce((result, next) => {\n            result.add(next.dishId); \n            return result;\n        }, new Set());\n\n        return (\n            <div>\n                <div style={{display: 'flex'}}>\n                    <div style={FieldContainerStyle}>\n                        <label>Please select a dish</label>\n                        <select value={dishId} style={InputStyle} onChange={this.handleDishChange}>\n                            <option disabled value=\"\">---</option>\n                            {\n                                filteredDishes\n                                    .filter(dish => !selectedDishesId.has(dish.id))\n                                    .map(dish => (<option key={dish.id} value={dish.id}>{dish.name}</option>))\n                            }\n                        </select>\n                    </div>\n                    <div style={FieldContainerStyle}>\n                        <label>Please enter no of serving</label>\n                        <input \n                            type=\"number\" \n                            min=\"1\"\n                            style={InputStyle} \n                            value={count} \n                            onChange={this.handlePeopleCountChange}  />\n                    </div>\n                </div>\n                <button style={PlusStyle} onClick={this.addDish}>+</button> \n            </div>\n        );\n    }\n  }\n  \n  export default DishSelector;","// @flow\nimport React, { Component } from 'react';\nimport { dishesAsMap } from '../services/restaurantService';\n\nimport type { SelectedDishType } from '../types';\n\ntype Props = {\n    removeDish?: (id: string) => void,\n    selectedDishes: Array<SelectedDishType>,\n}\n\n/**\n * List of dishes selected by the user\n * it is used both during the selection and the review\n * \n * TODO add an input during the selection stage to replace the existing value.\n */\nclass DishesList extends Component<Props> {\n    removeDishWrapper(id: string) {\n        const { removeDish } = this.props;\n        if (removeDish) {\n            removeDish(id);\n        }\n    }\n\n    render() {\n        const { selectedDishes, removeDish } = this.props;\n        return (\n            <div>\n                <table>\n                    <tbody>\n                        { selectedDishes.map(dish => (\n                            <tr key={dish.id}>\n                                <td>\n                                    {dishesAsMap.get(dish.dishId).name}\n                                </td>\n                                <td>\n                                    {dish.count}\n                                </td>\n                                {\n                                    removeDish && (\n                                        <td><button onClick={this.removeDishWrapper.bind(this, dish.id)}>delete</button> </td>\n                                    )\n                                }\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n  }\n  \n  export default DishesList;","// @flow\nimport React, { Component } from 'react';\nimport { getDishesByRestaurant } from '../services/restaurantService';\nimport StepperButtons from '../stepper/StepperButtons';\nimport { ErrorStyle } from './style';\nimport DishSelector from './DishSelector';\nimport DishesList from './DishesList';\n\nimport type { FormState, SelectedDishType, MealType } from '../types';\n\ntype Props = {\n    updateState: (partialState: $Shape<FormState>) => void,\n    prevStep: () => void,\n    nextStep: () => void,\n    selectedMeal: MealType,\n    peopleCount: number,\n    selectedMeal: string,\n    selectedRestaurant: string,\n    selectedDishes: Array<SelectedDishType>,\n};\n\ntype State = {\n    error: string,\n    filteredDishes: Array<any>, // TODO make type\n};\n\n/**\n * Manager to add more servings to the state of the form\n * also display error when necessary\n */\nclass RestaurantSelection extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = this.buildFilteredDishesState();\n    }\n\n    componentWillReceiveProps(nextProps: Props) {\n        if (this.props.selectedMeal !== nextProps.selectedMeal || this.props.selectedRestaurant !== nextProps.selectedRestaurant) {\n            this.setState(this.buildFilteredDishesState(nextProps));\n        }\n    }\n\n    buildFilteredDishesState(props: Props = this.props) {\n        return {\n            error: \"\",\n            filteredDishes: getDishesByRestaurant(props.selectedMeal, props.selectedRestaurant),\n        };\n    }\n\n    updateDishes(selectedDishes: Array<SelectedDishType>) {\n        const { updateState } = this.props;\n        const { error } = this.state;\n        updateState({selectedDishes});\n        if (error) { // refresh error if count become greater than number of people\n            this.validateFields(selectedDishes);\n        }\n    }\n\n    addDish = (dish: SelectedDishType) => {\n        const { selectedDishes } = this.props;\n        this.updateDishes([...selectedDishes, dish]);\n    }\n\n    removeDish = (id: string) => {\n        const { selectedDishes } = this.props;\n        this.updateDishes(selectedDishes.filter(dish => dish.id !== id));\n    }\n\n    setError = (error: string) => {\n        this.setState({error});\n    }\n\n    validateFields(selectedDishes: Array<SelectedDishType> = this.props.selectedDishes) {\n        const { peopleCount } = this.props;\n\n        if (selectedDishes.length === 0) {\n            this.setError('You must add at least one serving');\n            return false;\n        }\n\n        const sumOfDishes = selectedDishes.reduce((result, next) => result + next.count, 0);\n        if (sumOfDishes < peopleCount) {\n            this.setError(`You must select more servings (${sumOfDishes}/${peopleCount})`);\n            return false;\n        }\n\n        this.setError('');\n        return true;\n    }\n\n    /**\n     * wrapper around nextStep to trigger the validation before going to the next view (<Review/>)\n     */\n    nextStepWrapper = () => {\n        if (this.validateFields()) {\n            this.props.nextStep();\n        }\n    }\n\n    render() {\n        const { selectedDishes, prevStep } = this.props;\n        const { filteredDishes, error } = this.state;\n\n        return (\n            <div>\n                <DishesList selectedDishes={selectedDishes} removeDish={this.removeDish} />\n                { selectedDishes.length < filteredDishes.length && \n                    <DishSelector \n                        selectedDishes={selectedDishes} \n                        filteredDishes={filteredDishes} \n                        addDish={this.addDish} \n                        setError={this.setError} />\n                }\n                { error && \n                    <div style={ErrorStyle}>{error}</div> \n                }\n                <StepperButtons isValid prevStep={prevStep} nextStep={this.nextStepWrapper} />\n            </div>\n        );\n    }\n  }\n  \n  export default RestaurantSelection;","// @flow\nimport React, { Component } from 'react';\nimport StepperButtons from '../stepper/StepperButtons';\nimport DishesList from './DishesList';\nimport { TableKeyStyle } from './style';\n\nimport type { SelectedDishType, MealType } from '../types';\n\ntype Props = {\n    prevStep: () => void,\n    submit: () => void,   \n    selectedMeal: MealType,\n    peopleCount: number,\n    selectedMeal: string,\n    selectedRestaurant: string,\n    selectedDishes: Array<SelectedDishType>,\n};\n\nclass Review extends Component<Props> {\n    \n    render() {\n        const { selectedDishes, selectedMeal, selectedRestaurant, peopleCount, prevStep, submit } = this.props;\n        return (\n            <div>\n                <table>\n                    <tbody>\n                        <tr>\n                            <td style={TableKeyStyle}>Meal:</td>\n                            <td>{selectedMeal}</td>\n                        </tr>\n                        <tr>\n                            <td style={TableKeyStyle}>No of people:</td>\n                            <td>{peopleCount}</td>\n                        </tr>\n                        <tr>\n                            <td style={TableKeyStyle}>Restaurant:</td>\n                            <td>{selectedRestaurant}</td>\n                        </tr>\n                        <tr>\n                            <td style={TableKeyStyle}>Dishes:</td>\n                            <td>\n                                <DishesList selectedDishes={selectedDishes} />\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                <StepperButtons isValid submit prevStep={prevStep} nextStep={submit} />\n            </div>\n        );\n    }\n  }\n  \n  export default Review;","// @flow\nimport React, { Component } from 'react';\n\nconst MainContainerStyle = {\n    display: 'flex',\n    overflow: 'hidden',\n    borderRadius: 10,\n    border: '1px solid #e0e0e0',\n    margin: 20,\n}\n\nconst StepStyle = {\n    padding: '5px 15px',\n    backgroundColor: '#d6d6d6',\n}\n\nconst PreviousStepStyle = {\n    ...StepStyle,\n    backgroundColor: '#fff',\n}\n\nconst CurrentStepStyle = {\n    ...StepStyle,\n    backgroundColor: '#f9f9f9',\n    borderBottom: '2px solid #396fff'\n}\n\n\ntype Props = {\n    currentStep: number,\n};\n\n// TODO could be improved by using a context\nconst Steps = ['step 1', 'step 2', 'step 3', 'review'];\n\n/**\n * Easy stepper\n * only here to display the position\n * \n * TODO: add interaction (ex: click 'step 1')\n */\nclass Stepper extends Component<Props> {\n    render() {\n        const { currentStep } = this.props;\n        return (\n            <div style={MainContainerStyle}>\n                {\n                    Steps.map((name, idx) => {\n                        let style = StepStyle;\n                        if (idx < currentStep) {\n                            style = PreviousStepStyle;\n                        } else if (idx === currentStep) {\n                            style = CurrentStepStyle;\n                        }\n                        return (<div key={name} style={style}>{name}</div>)\n                    })\n                }\n            </div>\n        );\n    }\n  }\n  \n  export default Stepper;","// @flow\nimport React, { Component } from 'react';\nimport MealSelection from './form/MealSelection';\nimport RestaurantSelection from './form/RestaurantSelection';\nimport DishesSelection from './form/DishesSelection';\nimport Review from './form/Review';\nimport Stepper from './stepper/Stepper';\n\nimport type { FormState } from './types';\n\nconst MainContainerStyle = {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n};\n\ntype Props = {\n};\n\n/**\n * Form manager\n * Store the state of all field from the form at each stage.\n * Furthermore, control the current view displayed (step).\n * \n * I could have used Indformed to simplify the form process, \n * but it's not very effective with a Stepper \n * and it would go against the interview necessity\n */\nclass App extends Component<Props, FormState> {\n  state = {\n    step: 0,\n    selectedMeal: \"lunch\",\n    peopleCount: 1,\n    selectedRestaurant: \"\",\n    selectedDishes:[],\n  };\n\n  updateState = (partialState: $Shape<FormState>) => {\n    this.setState(partialState);\n  }\n\n  updateStep(step: number) {\n    this.updateState({step})\n  }\n\n  prevStep = () => {\n    const { step } = this.state;\n    this.updateStep(step - 1);\n  }\n\n  nextStep = () => {\n    const { step } = this.state;\n    this.updateStep(step + 1);\n  }\n\n  submit = () => {\n    const { selectedMeal, peopleCount, selectedRestaurant, selectedDishes } = this.state;\n    console.log('result', {\n      selectedMeal,\n      peopleCount,\n      selectedRestaurant,\n      selectedDishes,\n    });\n  }\n\n  getView() {\n    const { step, selectedMeal, peopleCount, selectedRestaurant, selectedDishes } = this.state;\n    switch(step) {\n      case 3:\n        return (\n          <Review \n            prevStep={this.prevStep}\n            submit={this.submit}\n            selectedMeal={selectedMeal} \n            selectedRestaurant={selectedRestaurant} \n            peopleCount={peopleCount}\n            selectedDishes={selectedDishes} />\n        );\n      case 2:\n        return (\n          <DishesSelection \n            prevStep={this.prevStep}\n            nextStep={this.nextStep}\n            updateState={this.updateState} \n            selectedMeal={selectedMeal} \n            selectedRestaurant={selectedRestaurant} \n            peopleCount={peopleCount}\n            selectedDishes={selectedDishes} />\n        );\n      case 1:\n        return (\n          <RestaurantSelection \n            prevStep={this.prevStep}\n            nextStep={this.nextStep}\n            updateState={this.updateState} \n            selectedMeal={selectedMeal} \n            selectedRestaurant={selectedRestaurant} />\n        );\n      case 0:\n      default:\n        return (\n          <MealSelection \n            nextStep={this.nextStep}\n            updateState={this.updateState} \n            selectedMeal={selectedMeal} \n            peopleCount={peopleCount} />\n        );\n    }\n  }\n\n  render() {\n    const { step } = this.state;\n    return (\n      <div style={MainContainerStyle}>\n        <Stepper currentStep={step} updateStep={this.updateStep} />\n        {this.getView()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// @flow\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst container = document.getElementById('root');\nif (container) {\n    ReactDOM.render(<App />, container);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}